---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

import '../assets/styles/base.css';

interface Props {
    title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="ja">
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content="株式会社RISE VISTAは、不動産を通じて人生100年時代の資産形成を支える総合不動産会社です。不動産売買・賃貸仲介・不動産管理・投資用物件のご提案まで、幅広いニーズに誠実にお応えします。" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="generator" content={Astro.generator} />
        <meta property="og:title" content="不動産をお探しなら株式会社RISE VISTA｜人生100年時代を支える総合不動産会社" />
        <meta property="og:description" content="株式会社RISE VISTAは、不動産を通じて人生100年時代の資産形成を支える総合不動産会社です。不動産売買・賃貸仲介・不動産管理・投資用物件のご提案まで、幅広いニーズに誠実にお応えします。" />
        <meta property="og:type" content="website" />
        <meta property="og:site_name" content="株式会社RISE VISTA" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content="不動産をお探しなら株式会社RISE VISTA｜人生100年時代を支える総合不動産会社" />
        <meta name="twitter:description" content="株式会社RISE VISTAは、不動産を通じて人生100年時代の資産形成を支える総合不動産会社です。不動産売買・賃貸仲介・不動産管理・投資用物件のご提案まで、幅広いニーズに誠実にお応えします。" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
        />
        <!-- Lenis Smooth Scroll -->
        <script src="https://unpkg.com/lenis@1.0.45/dist/lenis.min.js"></script>
        <link
            rel="apple-touch-icon"
            sizes="180x180"
            href="/apple-touch-icon.png"
        />
        <link
            rel="icon"
            type="image/png"
            sizes="32x32"
            href="/favicon-32x32.png"
        />
        <link
            rel="icon"
            type="image/png"
            sizes="16x16"
            href="/favicon-16x16.png"
        />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <script>
          (function(d) {
            var config = {
              kitId: 'zkl0ddn',
              scriptTimeout: 3000,
              async: true
            },
            h=d.documentElement,t=setTimeout(function(){h.className=h.className.replace(/\bwf-loading\b/g,"")+" wf-inactive";},config.scriptTimeout),tk=d.createElement("script"),f=false,s=d.getElementsByTagName("script")[0],a;h.className+=" wf-loading";tk.src='https://use.typekit.net/'+config.kitId+'.js';tk.async=true;tk.onload=function(){f=true;clearTimeout(t);try{(window as any).Typekit.load(config)}catch(e){}};s?.parentNode?.insertBefore(tk,s)
          })(document);
        </script>
        <slot name="head" />
        <title>{title}</title>
    </head>
    <body class="font-tsukushi m-0 p-0 text-[#0C223F] bg-primary-back">
        <Header />
        <main class="flex flex-col text-primary w-full">
            <slot />
            <div class="grow"></div>
            <Footer />
        </main>
        <slot name="foot" />
    </body>
</html>

<script>
  (function(document) {
    // Typekit configuration
    const config = {
      kitId: 'zkl0ddn',
      scriptTimeout: 3000,
      async: true
    };

    // Get document element and first script tag
    const htmlElement = document.documentElement;
    const firstScript = document.getElementsByTagName('script')[0];

    // Add loading class to html element
    htmlElement.className += ' wf-loading';

    // Set timeout to add inactive class if script fails to load
    const timeout = setTimeout(function() {
      htmlElement.className = htmlElement.className.replace(/\bwf-loading\b/g, '') + ' wf-inactive';
    }, config.scriptTimeout);

    // Create Typekit script element
    const typekitScript = document.createElement('script');
    typekitScript.src = 'https://use.typekit.net/' + config.kitId + '.js';
    typekitScript.async = config.async;

    // Track if script has already loaded
    let scriptLoaded = false;

    // Handle script load events (both modern and legacy)
    const handleLoad = function() {
      // Skip if already loaded
      if (scriptLoaded) {
        return;
      }
      
      scriptLoaded = true;
      clearTimeout(timeout);
      
      try {
        // Load Typekit with configuration
        window.Typekit.load(config);
      } catch (error) {
        console.error('Typekit loading error:', error);
      }
    };

    // Modern browsers
    typekitScript.onload = handleLoad;
    
    // Legacy IE support
    (typekitScript as any).onreadystatechange = function(this: any) {
      const readyState = this.readyState;
      if (readyState === 'complete' || readyState === 'loaded') {
        handleLoad();
      }
    };

    // Insert script before the first script tag
    if (firstScript && firstScript.parentNode) {
      firstScript.parentNode.insertBefore(typekitScript, firstScript);
    }
  })(document);
</script>

<script>
  // TypeScript型定義を追加
  declare global {
    interface Window {
      Lenis: {
        new (config: {
          duration: number;
          easing: (t: number) => number;
          smooth: boolean;
          smoothWheel: boolean;
          smoothTouch: boolean;
          lerp?: number;
          infinite?: boolean;
        }): {
          raf: (time: number) => void;
          scrollTo: (target: number | string | Element, options?: {
            duration?: number;
            easing?: (t: number) => number;
            force?: boolean;
          }) => void;
          destroy: () => void;
        };
      };
      smoothScrollTo: (target: number | string | Element, options?: {
        duration?: number;
        easing?: (t: number) => number;
        offset?: number;
      }) => void;
      Typekit: {
        load: (config: {
          kitId: string;
          scriptTimeout: number;
          async: boolean;
        }) => void;
      };
    }
  }

  // スクロール時の処理
  document.addEventListener('scroll', () => {
    const scrollTop = window.scrollY || 0;
    document.documentElement.style.setProperty('--scroll-y', `${scrollTop}px`);


    // 一度でもスクロールしたら visibility を visible に
    if (document.documentElement.style.getPropertyValue('--visibility-on-scroll') !== 'visible') {
      document.documentElement.style.setProperty('--visibility-on-scroll', 'visible');
    }
  });

  // モバイルメニュー制御
  const mobileMenuButton = document.querySelector('.mobile-menu-button');
  const mobileMenu = document.querySelector('.mobile-menu');

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
    mobileMenu?.classList.toggle('active');
  });

  const mobileMenuLinks = document.querySelectorAll('.mobile-menu a');
  mobileMenuLinks.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
      mobileMenu?.classList.remove('active');
    });
  });

// Lenis Smooth Scroll Implementation
let lenis: any = null;

// Initialize Lenis smooth scroll
function initLenis() {
  // Check if Lenis is available
  if (typeof window.Lenis === 'undefined') {
    console.warn('Lenis is not loaded, falling back to native smooth scroll');
    return;
  }

  // Initialize Lenis with configuration
  lenis = new window.Lenis({
    duration: 1.2,
    easing: (t: number) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
    smooth: true,
    smoothWheel: true,
    smoothTouch: true,
    // よりスムーズなクリック時の動きのための設定
    lerp: 0.07, // より滑らかな補間
    infinite: false, // 無限スクロールを無効化
  });

  // Animation frame loop
  function raf(time: number) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }
  requestAnimationFrame(raf);

  // Handle anchor links
  initAnchorLinks();
}

// Initialize anchor link handling
function initAnchorLinks() {
  document.addEventListener('click', (event) => {
    const target = (event.target as Element).closest('a[href^="#"]');
    if (!target) return;

    const href = target.getAttribute('href');
    if (!href || href === '#') return;

    const targetElement = document.querySelector(href);
    if (!targetElement) return;

    // Prevent default behavior
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();

    // Use Lenis to scroll to element with smooth options
    if (lenis) {
      const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY;
      const headerOffset = 80; // Header height
      lenis.scrollTo(targetPosition - headerOffset, {
        duration: 1.5, // より長いdurationでスムーズに
        easing: (t: number) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // カスタムイージング
        force: true, // 強制的にスクロール
      });
    } else {
      // Fallback to native smooth scroll
      targetElement.scrollIntoView({ behavior: 'smooth' });
    }
  }, { passive: false, capture: true });
}

// 汎用的なスムーススクロール関数
function smoothScrollTo(target: number | string | Element, options?: {
  duration?: number;
  easing?: (t: number) => number;
  offset?: number;
}) {
  if (lenis) {
    let scrollTarget: number;
    
    if (typeof target === 'number') {
      scrollTarget = target;
    } else if (typeof target === 'string') {
      const element = document.querySelector(target);
      if (element) {
        scrollTarget = element.getBoundingClientRect().top + window.scrollY;
      } else {
        return;
      }
    } else {
      scrollTarget = target.getBoundingClientRect().top + window.scrollY;
    }
    
    // オフセットを適用
    if (options?.offset) {
      scrollTarget -= options.offset;
    }
    
    lenis.scrollTo(scrollTarget, {
      duration: options?.duration || 1.5,
      easing: options?.easing || ((t: number) => Math.min(1, 1.001 - Math.pow(2, -10 * t))),
      force: true,
    });
  } else {
    // フォールバック
    if (typeof target === 'string') {
      const element = document.querySelector(target);
      if (element) {
        element.scrollIntoView({ behavior: 'smooth' });
      }
    } else if (typeof target === 'number') {
      window.scrollTo({ top: target, behavior: 'smooth' });
    } else {
      target.scrollIntoView({ behavior: 'smooth' });
    }
  }
}

// グローバルに公開（他のスクリプトから使用可能）
(window as any).smoothScrollTo = smoothScrollTo;

// 初期化処理
document.addEventListener('DOMContentLoaded', () => {
  // Initialize Lenis smooth scroll
  initLenis();

  // スクロール時の処理
  document.addEventListener('scroll', () => {
    const scrollTop = window.scrollY || 0;
    document.documentElement.style.setProperty('--scroll-y', `${scrollTop}px`);


    // 一度でもスクロールしたら visibility を visible に
    if (document.documentElement.style.getPropertyValue('--visibility-on-scroll') !== 'visible') {
      document.documentElement.style.setProperty('--visibility-on-scroll', 'visible');
    }
  });

  // モバイルメニュー制御
  const mobileMenuButton = document.querySelector('.mobile-menu-button');
  const mobileMenu = document.querySelector('.mobile-menu');

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
    mobileMenu?.classList.toggle('active');
  });

  const mobileMenuLinks = document.querySelectorAll('.mobile-menu a');
  mobileMenuLinks.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
      mobileMenu?.classList.remove('active');
    });
  });
});
</script>

<style>

.sticky-section {
  border: 2px solid red;
}
.image-wrapper {
  border: 2px solid blue;
}
.content-wrapper {
  border: 2px solid green;
}

/* ヘッダーのスタイル */
header {
  transition: background-color 0.3s ease;
}

/* モバイルメニューのアニメーション */
.mobile-menu {
  transition: all 0.3s ease-in-out;
}

.mobile-menu.active {
  display: block;
  animation: slideDown 0.3s ease-in-out;
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* モバイル対応 */
@media (max-width: 768px) {
  body {
    width: 100vw;
    overflow-x: hidden;
  }

  main {
    width: 100vw;
    overflow-x: hidden;
  }
}
  z-index: 9999;
</style>