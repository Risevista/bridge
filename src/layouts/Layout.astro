---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../assets/styles/base.css';

interface Props {
    title: string;
}

const { title } = Astro.props;
const currentPath = Astro.url.pathname;
const isIndexPage = currentPath === '/';
---

<!doctype html>
<html lang="ja">
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content="株式会社Bridgeの公式サイトです。" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="generator" content={Astro.generator} />
        <meta property="og:title" content="株式会社Bridge" />
        <meta property="og:description" content="株式会社Bridgeの公式サイトです。" />
        <meta property="og:type" content="website" />
        <meta property="og:site_name" content="株式会社Bridge" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content="株式会社Bridge" />
        <meta name="twitter:description" content="株式会社Bridgeの公式サイトです。" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link href="https://fonts.googleapis.com/css2?family=Noto+Serif+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
        <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
        />
        <link
            rel="apple-touch-icon"
            sizes="180x180"
            href="/apple-touch-icon.png"
        />
        <link
            rel="icon"
            type="image/png"
            sizes="32x32"
            href="/favicon-32x32.png"
        />
        <link
            rel="icon"
            type="image/png"
            sizes="16x16"
            href="/favicon-16x16.png"
        />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <slot name="head" />
        <title>{title}</title>
    </head>
    <body class="bg-primary-back font-serif m-0 p-0">
        <Header isIndexPage={isIndexPage} />
        <main class="flex flex-col bg-primary-back text-primary w-full">
            <slot />
            <div class="grow"></div>
            <Footer />
        </main>
        <slot name="foot" />
    </body>
</html>

<script>
  // TypeScript型定義を追加
  declare global {
    interface Window {
      Lenis: any;
    }
  }

  // 現在のページがindex.astroかどうかを判定
  const isIndexPage = window.location.pathname === '/';

  // index.astroでのみヘッダーの初期化処理を実行
  if (isIndexPage) {
    let isHeaderInitialized = false;

    // ヘッダーの初期化関数
    function initializeHeader() {
      const header = document.querySelector('header');
      if (header && !isHeaderInitialized) {
        // 基本スタイルを設定
        header.style.position = 'fixed';
        header.style.top = '0';
        header.style.left = '0';
        header.style.right = '0';
        header.style.zIndex = '1000';
        header.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
        header.style.backgroundColor = 'rgba(255, 255, 255, 0.95)';
        header.style.backdropFilter = 'blur(10px)';
        (header.style as any).webkitBackdropFilter = 'blur(10px)';
        header.style.boxShadow = '0 2px 20px rgba(0, 0, 0, 0.1)';
        
        // 非表示状態に設定
        header.classList.add('header-hidden');
        header.classList.remove('header-visible');
        
        isHeaderInitialized = true;
      }
    }

    // ページ読み込み時の処理
    document.addEventListener('DOMContentLoaded', initializeHeader);
    
    // より強制的な初期化（他のスタイルを上書き）
    window.addEventListener('load', () => {
      setTimeout(() => {
        const header = document.querySelector('header');
        if (header) {
          // 全ての既存のスタイルを強制的に上書き
          header.style.setProperty('opacity', '0', 'important');
          header.style.setProperty('visibility', 'hidden', 'important');
          header.style.setProperty('transform', 'translateY(-100%)', 'important');
          header.style.setProperty('position', 'fixed', 'important');
          header.classList.add('header-hidden');
          header.classList.remove('header-visible');
        }
      }, 100);
    });

    // スクロール時の処理
    let ticking = false;
    function handleScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          const scrollTop = window.scrollY || 0;
          document.documentElement.style.setProperty('--scroll-y', `${scrollTop}px`);

          // ヘッダー表示制御 - idで特定
          const header = document.getElementById('header-nav');
          if (header) {
            if (scrollTop > 200) { // 200pxスクロールしたら表示
              header.style.setProperty('opacity', '1', 'important');
              header.style.setProperty('visibility', 'visible', 'important');
              header.style.setProperty('transform', 'translateY(0)', 'important');
              header.classList.add('header-visible');
              header.classList.remove('header-hidden');
            } else {
              header.style.setProperty('opacity', '0', 'important');
              header.style.setProperty('visibility', 'hidden', 'important');
              header.style.setProperty('transform', 'translateY(-100%)', 'important');
              header.classList.add('header-hidden');
              header.classList.remove('header-visible');
            }
          }

          // チケットボタン表示制御
          const reserveBtn = document.querySelector('.reserve-btn');
          if (scrollTop > 50) {
            reserveBtn?.classList.add('visible');
          } else {
            reserveBtn?.classList.remove('visible');
          }

          // 一度でもスクロールしたら visibility を visible に
          if (document.documentElement.style.getPropertyValue('--visibility-on-scroll') !== 'visible') {
            document.documentElement.style.setProperty('--visibility-on-scroll', 'visible');
          }
          
          ticking = false;
        });
        ticking = true;
      }
    }

    document.addEventListener('scroll', handleScroll, { passive: true });
  }

  // モバイルメニュー制御（全ページで共通）
  const mobileMenuButton = document.querySelector('.mobile-menu-button');
  const mobileMenu = document.querySelector('.mobile-menu');

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
    mobileMenu?.classList.toggle('active');
  });

  const mobileMenuLinks = document.querySelectorAll('.mobile-menu a');
  mobileMenuLinks.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
      mobileMenu?.classList.remove('active');
    });
  });
</script>

<style>
  /* セリフフォントファミリーの定義 */
  :root {
    --font-serif: 'Noto Serif JP', serif;
  }

  /* 全体にセリフフォントを適用 */
  body, html {
    font-family: var(--font-serif), serif;
  }

  /* ヘッダー、メインコンテンツ、フッターなど全ての要素に適用 */
  * {
    font-family: var(--font-serif), serif;
  }

.reserve-btn {
  opacity: 0;
  pointer-events: none;
  transform: translateY(10px);
  transition: opacity 0.3s ease, transform 0.3s ease;
}
.reserve-btn.visible {
  opacity: 1;
  pointer-events: auto;
  transform: translateY(0);
}

/* デバッグ用の境界線（本番では削除） */
.sticky-section {
  border: 2px solid red;
}
.image-wrapper {
  border: 2px solid blue;
}
.content-wrapper {
  border: 2px solid green;
}

/* ヘッダーのスタイル - クラスベースのアプローチ */
header {
  position: fixed !important;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  background-color: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
}

/* 非表示状態 - 最高詳細度で強制適用（index.astroでのみ適用） */
header.header-hidden {
  opacity: 0 !important;
  visibility: hidden !important;
  transform: translateY(-100%) !important;
}

/* 表示状態 */
header.header-visible {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

/* ダークテーマ対応 */
@media (prefers-color-scheme: dark) {
  header {
    background-color: rgba(0, 0, 0, 0.95) !important;
    box-shadow: 0 2px 20px rgba(255, 255, 255, 0.1);
  }
}

/* メインコンテンツの調整 */
main {
  padding-top: 0;
}

/* モバイルメニューのアニメーション */
.mobile-menu {
  transition: all 0.3s ease-in-out;
}

.mobile-menu.active {
  display: block;
  animation: slideDown 0.3s ease-in-out;
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* モバイル対応 */
@media (max-width: 768px) {
  body {
    width: 100vw;
    overflow-x: hidden;
  }

  main {
    width: 100vw;
    overflow-x: hidden;
  }
  
  header {
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }
}
</style>