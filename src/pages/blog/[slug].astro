---
import { getCollection } from "astro:content";
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts
    .filter((post: any) => !post.data.draft)
    .map((post: any) => ({
      params: { slug: post.slug },
      props: { post },
    }));
}

const { post } = Astro.props as { post: any };

// Markdownを簡単なHTMLに変換する関数
function markdownToHtml(markdown: string): string {
  return markdown
    .replace(/^# (.*$)/gim, '<h1>$1</h1>')
    .replace(/^## (.*$)/gim, '<h2>$1</h2>')
    .replace(/^### (.*$)/gim, '<h3>$1</h3>')
    .replace(/^#### (.*$)/gim, '<h4>$1</h4>')
    .replace(/^##### (.*$)/gim, '<h5>$1</h5>')
    .replace(/^###### (.*$)/gim, '<h6>$1</h6>')
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    .replace(/`(.*?)`/g, '<code>$1</code>')
    .replace(/^\* (.*$)/gim, '<li>$1</li>')
    .replace(/^- (.*$)/gim, '<li>$1</li>')
    .replace(/^\d+\. (.*$)/gim, '<li>$1</li>')
    .replace(/\n\n/g, '</p><p>')
    .replace(/\n/g, '<br>')
    .replace(/^(?!<[h|l])/gm, '<p>')
    .replace(/(?<!>)$/gm, '</p>')
    .replace(/<p><\/p>/g, '')
    .replace(/<li>.*<\/li>/g, (match) => `<ul>${match}</ul>`)
    .replace(/<\/ul><ul>/g, '');
}
---

<Layout title={post.data.title}>
  <article class="max-w-4xl mx-auto px-4 md:py-48 py-24 bg-primary-back">
    <!-- 記事ヘッダー -->
    <header class="mb-8">
      <h1 class="text-2xl md:text-3xl font-bold text-primary font-tsukushi mb-4">
        {post.data.title}
      </h1>
      <div class="flex items-center text-sm mb-6">
        <time datetime={post.data.date.toISOString()}>
          {post.data.date.toLocaleDateString('ja-JP', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
      </div>
      {post.data.tags && post.data.tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-6">
          {post.data.tags.map((tag: string) => (
            <span class="px-3 py-1 bg-secondary text-primary-back text-xs rounded-full">
              {tag}
            </span>
          ))}
        </div>
      )}
    </header>

    <!-- 記事本文 -->
    <div class="prose prose-lg max-w-none font-tsukushi text-primary">
      <div set:html={markdownToHtml(post.body)} />
    </div>

    <!-- 戻るボタン -->
    <div class="mt-12 pt-8 border-t border-gray-200">
      <a 
        href="/blog" 
        class="inline-flex items-center text-teal-600 hover:text-teal-800 font-medium"
      >
        ← ブログ一覧に戻る
      </a>
    </div>
  </article>
</Layout>

<style>
  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    @apply text-primary font-tsukushi;
  }
  
  .prose h1 {
    @apply text-3xl font-bold;
  }
  
  .prose h2 {
    @apply text-2xl font-bold mt-8 mb-4;
  }
  
  .prose h3 {
    @apply text-xl font-bold mt-6 mb-3;
  }
  
  .prose p {
    @apply leading-relaxed mb-4;
  }
  
  .prose ul,
  .prose ol {
    @apply mb-4;
  }
  
  .prose li {
    @apply mb-2;
  }
  
  .prose strong {
    @apply font-bold text-primary;
  }
  
  .prose a {
    @apply text-teal-600 hover:text-teal-800 underline;
  }
  
  .prose blockquote {
    @apply border-l-4 border-teal-200 pl-4 italic text-gray-600 my-6;
  }
  
  .prose code {
    @apply bg-gray-100 px-2 py-1 rounded text-sm;
  }
  
  .prose pre {
    @apply bg-gray-100 p-4 rounded-lg overflow-x-auto;
  }
  
  .prose pre code {
    @apply bg-transparent p-0;
  }
</style>
