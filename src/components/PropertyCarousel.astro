---
import PropertySlideCard from "./PropertySlideCard.astro";
import { getCollection } from "astro:content";

// 物件データ読込
const properties = await getCollection("properties");
const entries = properties
  .filter((property) => !property.data.draft)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());
---

<section class="mx-auto max-w-7xl px-8 py-16">
  <h2 class="text-4xl md:text-5xl font-bold tracking-tight text-center mb-10 font-tsukushi text-primary">
    取り扱い物件
  </h2>

  {entries.length > 0 ? (
    <div class="relative">
      <!-- カスタムカルーセル -->
      <div class="carousel-container overflow-hidden mx-auto">
        <div
          class="carousel-track flex items-stretch transition-transform duration-300 ease-in-out"
          id="carousel-track"
        >
          {entries.map((property) => (
            <div class="carousel-slide flex-shrink-0 px-3 h-full">
              <PropertySlideCard
                class="h-full flex flex-col"
                title={property.data.title}
                date={property.data.date}
                thumbnail={property.data.thumbnail}
                brand={property.data.brand}
                brand_logo={property.data.brand_logo}
                link={property.data.link}
                href={`/properties/${property.slug}/`}
              />
            </div>
          ))}
        </div>
      </div>

      <!-- 右下：矢印 + 分数 -->
      <div class="absolute -bottom-10 md:-bottom-20 right-0 flex items-center gap-2 z-10">
          <!-- Prev Button -->
          <button
            class="carousel-prev w-8 h-8 md:w-12 md:h-12 rounded-full border flex items-center justify-center bg-white hover:bg-gray-50 transition-colors"
            id="carousel-prev"
            aria-label="Previous"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 md:w-6 md:h-6 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
            </svg>
          </button>

          <!-- Fraction -->
          <div
            class="carousel-fraction text-sm md:text-base tracking-[0.25em] text-primary font-tsukushi"
            id="carousel-fraction"
          >
            01/09
          </div>

          <!-- Next Button -->
          <button
            class="carousel-next w-8 h-8 md:w-12 md:h-12 rounded-full border flex items-center justify-center bg-white hover:bg-gray-50 transition-colors"
            id="carousel-next"
            aria-label="Next"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 md:w-6 md:h-6 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>
    </div>
  ) : (
    <div class="text-center py-16">
      <p class="text-primary font-tsukushi text-lg">現在、取り扱い物件はありません。</p>
      <p class="text-primary font-tsukushi text-sm mt-2">
        新しい物件が追加され次第、こちらに表示されます。
      </p>
    </div>
  )}

  <!-- 下のボタン -->
  {entries.length > 0 && (
    <div class="mt-16 flex justify-center">
      <a
        href="/properties"
        class="inline-flex items-center justify-center h-12 px-10 rounded-full border text-[15px] font-tsukushi text-primary hover:bg-primary hover:text-white transition-colors"
      >
        For Full List
      </a>
    </div>
  )}
</section>

<style>
  .carousel-container { 
    max-width: 100%; 
    margin-left: auto;
    margin-right: auto;
  }

  @media (max-width: 767px) {
    .carousel-container {
      max-width: calc(100% - 2rem);
      margin-left: auto;
      margin-right: auto;
    }
  }

  /* JSで参照しやすいよう column-gap を明示 */
  .carousel-track { display: flex; column-gap: 24px; }

  .carousel-slide { 
    flex: 0 0 auto; 
    width: 100% !important; 
    display: flex;
    justify-content: center;
  }

  @media (min-width: 768px) {
    .carousel-slide { width: calc((100% - 24px)/2) !important; }
  }

  @media (min-width: 1024px) {
    .carousel-slide { width: calc((100% - 48px)/3) !important; }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.getElementById('carousel-track');
    const prevBtn = document.getElementById('carousel-prev');
    const nextBtn = document.getElementById('carousel-next');
    const fraction = document.getElementById('carousel-fraction');

    if (!track || !prevBtn || !nextBtn || !fraction) return;

    const slides = track.querySelectorAll('.carousel-slide');
    const totalSlides = slides.length;

    const getSlidesPerView = () => (
      window.innerWidth >= 1024 ? 3 :
      window.innerWidth >= 768  ? 2 : 1
    );

    let currentIndex = 0;
    let slidesPerView = getSlidesPerView();
    let maxIndex = Math.max(0, totalSlides - slidesPerView);

    const pad = (n: number) => String(n).padStart(2, "0");

    const updateCarousel = () => {
      const firstSlide = slides[0];
      const slideWidth = firstSlide?.getBoundingClientRect().width || 0;
      const gap = parseFloat(getComputedStyle(track).columnGap || "24") || 24;

      const translateX = -(currentIndex * (slideWidth + gap));
      track.style.transform = `translateX(${translateX}px)`;

      fraction.textContent = `${pad(currentIndex + 1)}/${pad(totalSlides)}`;

      (prevBtn as HTMLButtonElement).disabled = currentIndex === 0;
      (nextBtn as HTMLButtonElement).disabled = currentIndex === maxIndex;
      prevBtn.classList.toggle('opacity-40', (prevBtn as HTMLButtonElement).disabled);
      nextBtn.classList.toggle('opacity-40', (nextBtn as HTMLButtonElement).disabled);
    };

    const nextSlide = () => {
      currentIndex = Math.min(currentIndex + 1, maxIndex);
      updateCarousel();
    };

    const prevSlide = () => {
      currentIndex = Math.max(currentIndex - 1, 0);
      updateCarousel();
    };

    nextBtn.addEventListener('click', nextSlide);
    prevBtn.addEventListener('click', prevSlide);

    updateCarousel();

    window.addEventListener('resize', () => {
      slidesPerView = getSlidesPerView();
      maxIndex = Math.max(0, totalSlides - slidesPerView);
      currentIndex = Math.min(currentIndex, maxIndex);
      updateCarousel();
    });
  });
</script>
